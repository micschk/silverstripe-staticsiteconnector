<?php
/**
 * Reports on URLs that failed to import.
 * Data is based off a text file generated by the RewriteLinksTask
 *
 * @author Russell Michell 2013 <russell@silverstripe.com>
 */
class BadImportsReport extends SS_Report {

	/**
	 * 
	 * @return string
	 */
	public function title() {
		return "Pages with links to unimported URLs";
	}

	/*
	 * @param $params
	 * @return \ArrayList
	 */
	public function SourceRecords($params) {
		return $this->getDataAsSSList();
	}

	/**
	 * Get the columns to show with header titles
	 *
	 * @return array
	 */
	public function columns() {
		return array(
			'Title' => array(
				'title' => 'Title',
				'formatting' => '<a href=\"/admin/pages/edit/show/".$ID."\" title=\"See the page\">$Title</a>'
			),
			'ID' => array(
				'title' => 'Page ID',
				'formatting' => '".$ID."'
			),
			'Total' => array(
				'title' => 'No. Bad Urls',
				'formatting' => '".$Total."'
			),			
			'Created' => array(
				'title' => 'Import date',
				'casting' => 'SS_Datetime->Full'
			)		
		);
	}

	/*
	 * @return mixed boolean|array
	 */
	protected function getBadImportData() {
		$logFile = Config::inst()->get('StaticSiteRewriteLinksTask', 'log_file');
		if(!$logFile || !file_exists($logFile)) {
			return false;
		}
		return explode(PHP_EOL, file_get_contents($logFile));
	}

	/**
	 * Format the data as we'd like to see it in the presentational GridField
	 * 
	 * @return \ArrayList
	 */
	protected function getDataAsSSList() {
		$data = $this->getBadImportData();
		$list = new ArrayList();
		$linkCount = array();
		if(!$data) {
			return $list;
		}
		
		foreach($data as $line) {
			if(!strlen($line)>0 || !$processed = $this->processBadImportDataByLine($line)) {
				continue;
			}
			if(!$foundIn = DataObject::get_by_id('SiteTree', (int)$processed['ID'])) {
				continue;
			}
			
			/*
			 * Prevent the same page showing repeatedly in the report
			 * and show a total for the No. unimported URLs
			 */
			if(!isset($linkCount[$processed['ID']])) {
				$linkCount[$processed['ID']] = 0;
			}
			
			$linkCount[$processed['ID']] += 1;
			$foundIn->Total = 1;
			
			if(!$list->find('ID', $processed['ID'])) {
				$list->push($foundIn);
			}
			else {
				$foundIn->Total = $linkCount[$processed['ID']];
			}
		}
		
		return $list;
	}

	/**
	 * Post-process the text-based report - if available - line-by-line.
	 * 
	 * @param string $line
	 * @return mixed boolean|array $line If an array, it contains the Bad URL and the #ID of the page in which it was found
	 */
	protected function processBadImportDataByLine($line) {
		$badSchemes = implode('|',StaticSiteRewriteLinksTask::$non_http_uri_schemes);
		// Ignore the header found at the top of the logfile
		$prefix = "Couldn't rewrite: ";
		if(stristr($line, $prefix) !== false) {
			$line = str_replace($prefix, '', $line);
			if(preg_match("#($badSchemes)#i", $line)) {
				return false;
			}
			$matches = array();
			preg_match_all("#^(.+)\.?.+\s\[ID\#([0-9]+)\]$#", $line, $matches);
			if(!isset($matches[1][0]) && !isset($matches[2][0])) {
				// No matches
				return false;
			}
			return array(
				'BadUrl'	=> $matches[1][0],
				'ID'  => $matches[2][0]
			);
		}
		return false;
	}
}
